package org.vadere.util.math;

import static org.junit.Assert.assertTrue;

import org.junit.Before;
import org.junit.Test;

public class TestKernels {

  private static final float EPSILON = 0.00000000001f;

  // 3x3 normalized gaussian kernel with sigma^2 = 1.0
  private double[] gaussian3x3kernel =
      new double[] {
        0.07511360795411207, 0.12384140315297386, 0.07511360795411207,
        0.12384140315297386, 0.20417995557165622, 0.12384140315297386,
        0.07511360795411207, 0.12384140315297386, 0.07511360795411207
      };

  // 3x3 normalized gaussian kernel with sigma^2 = 0.7
  private double[] gaussian5x5kernel =
      new double[] {
        0.0007522898981192341,
        0.006412335879670672,
        0.013098652085041981,
        0.006412335879670672,
        0.0007522898981192341,
        0.006412335879670672,
        0.05465718938471622,
        0.11164972034082171,
        0.05465718938471622,
        0.006412335879670672,
        0.013098652085041981,
        0.11164972034082171,
        0.22806990612783812,
        0.11164972034082171,
        0.013098652085041981,
        0.006412335879670672,
        0.05465718938471622,
        0.11164972034082171,
        0.05465718938471622,
        0.006412335879670672,
        0.0007522898981192341,
        0.006412335879670672,
        0.013098652085041981,
        0.006412335879670672,
        0.0007522898981192341
      };

  // 3x3 not normalized gaussian kernel with sigma^2 = 0.7
  private double[] gaussian11x11kernel =
      new double[] {
        7.0178349016244e-17,
        4.346065275888469e-14,
        6.450132772605648e-12,
        2.294142421054552e-10,
        1.955471128401494e-9,
        3.994493809109567e-9,
        1.955471128401494e-9,
        2.294142421054552e-10,
        6.450132772605648e-12,
        4.346065275888469e-14,
        7.0178349016244e-17,
        4.346065275888469e-14,
        2.6914687573957536e-11,
        3.994493809109567e-9,
        1.4207362888773662e-7,
        0.0000012110010121755696,
        0.000002473744549690707,
        0.0000012110010121755696,
        1.4207362888773662e-7,
        3.994493809109567e-9,
        2.6914687573957536e-11,
        4.346065275888469e-14,
        6.450132772605648e-12,
        3.994493809109567e-9,
        5.928354452255858e-7,
        0.000021085596088394315,
        0.00017972848589337928,
        0.0003671362434323479,
        0.00017972848589337928,
        0.000021085596088394315,
        5.928354452255858e-7,
        3.994493809109567e-9,
        6.450132772605648e-12,
        2.294142421054552e-10,
        1.4207362888773662e-7,
        0.000021085596088394315,
        0.0007499591429350684,
        0.0063924690901105315,
        0.013058069656208201,
        0.0063924690901105315,
        0.0007499591429350684,
        0.000021085596088394315,
        1.4207362888773662e-7,
        2.294142421054552e-10,
        1.955471128401494e-9,
        0.0000012110010121755696,
        0.00017972848589337928,
        0.0063924690901105315,
        0.0544878497088428,
        0.11130380560084499,
        0.0544878497088428,
        0.0063924690901105315,
        0.00017972848589337928,
        0.0000012110010121755696,
        1.955471128401494e-9,
        3.994493809109567e-9,
        0.000002473744549690707,
        0.0003671362434323479,
        0.013058069656208201,
        0.11130380560084499,
        0.2273632967244836,
        0.11130380560084499,
        0.013058069656208201,
        0.0003671362434323479,
        0.000002473744549690707,
        3.994493809109567e-9,
        1.955471128401494e-9,
        0.0000012110010121755696,
        0.00017972848589337928,
        0.0063924690901105315,
        0.0544878497088428,
        0.11130380560084499,
        0.0544878497088428,
        0.0063924690901105315,
        0.00017972848589337928,
        0.0000012110010121755696,
        1.955471128401494e-9,
        2.294142421054552e-10,
        1.4207362888773662e-7,
        0.000021085596088394315,
        0.0007499591429350684,
        0.0063924690901105315,
        0.013058069656208201,
        0.0063924690901105315,
        0.0007499591429350684,
        0.000021085596088394315,
        1.4207362888773662e-7,
        2.294142421054552e-10,
        6.450132772605648e-12,
        3.994493809109567e-9,
        5.928354452255858e-7,
        0.000021085596088394315,
        0.00017972848589337928,
        0.0003671362434323479,
        0.00017972848589337928,
        0.000021085596088394315,
        5.928354452255858e-7,
        3.994493809109567e-9,
        6.450132772605648e-12,
        4.346065275888469e-14,
        2.6914687573957536e-11,
        3.994493809109567e-9,
        1.4207362888773662e-7,
        0.0000012110010121755696,
        0.000002473744549690707,
        0.0000012110010121755696,
        1.4207362888773662e-7,
        3.994493809109567e-9,
        2.6914687573957536e-11,
        4.346065275888469e-14,
        7.0178349016244e-17,
        4.346065275888469e-14,
        6.450132772605648e-12,
        2.294142421054552e-10,
        1.955471128401494e-9,
        3.994493809109567e-9,
        1.955471128401494e-9,
        2.294142421054552e-10,
        6.450132772605648e-12,
        4.346065275888469e-14,
        7.0178349016244e-17
      };

  @Before
  public void setUp() throws Exception {}

  @Test
  public void testGaussianKernelGeneration() {
    equalsMatrixValues(
        Convolution.generateDoubleGaussianKernel(3, 1.0), gaussian3x3kernel, EPSILON);
    equalsMatrixValues(
        Convolution.generateDoubleGaussianKernel(5, Math.sqrt(0.7)), gaussian5x5kernel, EPSILON);
    equalsMatrixValues(
        Convolution.generateDoubleGaussianKernel(11, Math.sqrt(0.7)), gaussian11x11kernel, EPSILON);
  }

  private static void equalsMatrixValues(
      final double[] m1, final double[] m2, final double epsilon) {
    assertTrue(m1.length == m2.length);
    for (int i = 0; i < m1.length; i++) {
      assertTrue(
          "computeGodunovDifference: "
              + i
              + ", "
              + m1[i]
              + ", "
              + m2[i]
              + ", "
              + Math.abs(m1[i] - m2[i]),
          Math.abs(m1[i] - m2[i]) <= epsilon);
    }
  }
}
